# jsonp - json parser written in C.

* What is it?
jsonp is a lexer in C, that performs lexical analysis on data on primary and secondary storage; depending on the data that has been provided to it,
as well as providing functions that allow you to then parse the json effortlessly, there are examples below of how it can be used to parse your data:

* EXAMPLES

** Writing a JSON prettifier:

#+BEGIN_SRC C 
#define JSONP_IMPLEMENTATION
#include "stb_jsonp.h"

static int prettify(const char *file_path, const char *output_file)
{
        if (jsonp_init(jsonp_create_json_info(JSONP_TEXT, file_path)) != JSONP_NO_ERROR) {
                fprintf(stderr, "Invalid file name!\n");
                return -1;
        }

        jsonp_token tok;
        int tab_count = 0, ttab_count = tab_count;
        while (jsonp_get_type_token(tok = jsonp_get_token()) != JSONP_TYPE_EOF) {
                JSONP_TYPE type = jsonp_get_type_token(tok);
                switch (type) {
                case JSONP_TYPE_OPEN_BRACE:
                        tab_count++;
                case JSONP_TYPE_COMMA:
                        printf("%s\n", jsonp_get_data_token(tok));
                        ttab_count = tab_count;
                        while (ttab_count--) {
                                printf("\t");
                        }
                        break;
                case JSONP_TYPE_CLOSE_BRACE:
                        tab_count--;
                        ttab_count = tab_count;
                        printf("\n");
                        while (ttab_count--) {
                                printf("\t");
                        }
                        printf("%s\n", jsonp_get_data_token(tok));
                        ttab_count = tab_count;
                        while (ttab_count--) {
                                printf("\t");
                        }
                        break;
                case JSONP_TYPE_COLON:
                        printf(" : ");
                        break;
                case JSONP_TYPE_STRING:
                        printf("\"%s\"", jsonp_get_data_token(tok));
                        break;
                default:
                        printf("%s", jsonp_get_data_token(tok));
                        break;
                }
        }

        jsonp_free();
        return 0;
}

int main(int argc, char **argv)
{
        if (jsonp_init(jsonp_create_json_info(JSONP_FILE,
                                              "sample.json")) != JSONP_NO_ERROR) {
                fprintf(stderr, "Failed!\n");
                exit(EXIT_FAILURE);
        }

        prettify();

        jsonp_free();
        return 0;
}
#+END_SRC

* HOWTO

In order to use this, you need to initialise the json parser using:
#+BEGIN_SRC C
/* initialise the json parser with the contents of information */
int jsonp_init(jsonp_info_t info);
#+END_SRC

You can create a jsonp_info_t structure using:
#+BEGIN_SRC C
/* initialises a jsonp_info_t structure with @type and @data */
jsonp_info_t jsonp_create_json_info(JSONP_INFO_DATA_TYPE type,
                                    const char *data);
#+END_SRC

Depending on what type you use, will determine how the parser treats data:
#+BEGIN_SRC C
typedef enum {
        JSONP_FILE = 0,         /* tells parser to treat data as a file path */
        JSONP_TEXT,             /* tells parser to treat data as a null-terminated character array */
        JSONP_INFO_DATA_COUNT
} JSONP_INFO_DATA_TYPE;
#+END_SRC

To close or free the data used by the parser you will need to make a call to:
#+BEGIN_SRC C
/* free the contents held in the json parser global state,
   this will free the parser's copy of the buffer, and/or close
   the open file it has */
int jsonp_free(void);
#+END_SRC

Once you have done the initialisation, you can now process tokens using the API:
#+BEGIN_SRC C
/* token operations */
jsonp_token jsonp_peek_token();                       /* peeks the next token  */
jsonp_token jsonp_get_token();                        /* gets the next token   */
jsonp_token jsonp_unget_token(jsonp_token tok);       /* ungets the next token */
int jsonp_rewind(void);                               /* goes to start of file or buffer the */
#+END_SRC

The first three functions return the following structure:
#+BEGIN_SRC C
/* structure storing token information */
typedef struct {
        buffer_t token; // stretchy buffer
        JSONP_TYPE type; // the token type stored there.
} jsonp_token;
#+END_SRC

The first field is a stretchy buffer that reallocates itself, and the second field refers to the
type of the token that is currently stored, here are the token types:
#+BEGIN_SRC C
typedef enum {
        JSONP_TYPE_EOF = 0,
        JSONP_TYPE_EMPTY,
        JSONP_TYPE_OPEN_BRACE,
        JSONP_TYPE_CLOSE_BRACE,
        JSONP_TYPE_OPEN_BRACKET,
        JSONP_TYPE_CLOSE_BRACKET,
        JSONP_TYPE_COMMA,
        JSONP_TYPE_COLON,
        JSONP_TYPE_NUMBER,
        JSONP_TYPE_STRING,
        JSONP_TYPE_UNDEFINED,
        JSONP_TYPE_ERROR,
        JSONP_TYPE_COUNT,
} JSONP_TYPE;
#+END_SRC

You can query the necessary information from the jsonp_token structure using the following
functions:
#+BEGIN_SRC C
JSONP_TYPE jsonp_get_type_token(jsonp_token tok); /* returns the token's JSONP_TYPE */
const char *jsonp_get_data_token(jsonp_token tok); /* returns the data in the stretchy buffer */
#+END_SRC
