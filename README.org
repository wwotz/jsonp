# jsonp - json parser written in C. 

* EXAMPLES

** Writing a JSON prettifier:

#+BEGIN_SRC C 
#define JSONP_IMPLEMENTATION
#include "stb_jsonp.h"

static int prettify()
{
        jsonp_token tok;
        int tab_count = 0, ttab_count = tab_count;
        while ((tok = jsonp_get_token()).type != JSONP_TYPE_EOF) {
                switch (tok.type) {
                case JSONP_TYPE_OPEN_BRACE:
                        tab_count++;
                case JSONP_TYPE_COMMA:
                        printf("%s\n", tok.token.data);
                        ttab_count = tab_count;
                        while (ttab_count--) {
                                printf("\t");
                        }
                        break;
                case JSONP_TYPE_CLOSE_BRACE:
                        tab_count--;
                        ttab_count = tab_count;
                        printf("\n");
                        while (ttab_count--) {
                                printf("\t");
                        }
                        printf("%s\n", tok.token.data);
                        int ttab_count = tab_count;
                        while (ttab_count--) {
                                printf("\t");
                        }
                        break;
                case JSONP_TYPE_COLON:
                        printf(" : ");
                        break;
                case JSONP_TYPE_STRING:
                        printf("\"%s\"", tok.token.data);
                        break;
                default:
                        printf("%s", tok.token.data);
                        break;
                }
        }
        return 0;
}

int main(int argc, char **argv)
{
        if (jsonp_init(jsonp_create_json_info(JSONP_FILE,
                                              "sample.json")) != JSONP_NO_ERROR) {
                fprintf(stderr, "Failed!\n");
                exit(EXIT_FAILURE);
        }

        prettify();

        jsonp_free();
        return 0;
}
#+END_SRC

* HOWTO

In order to use this, you need to initialise the json parser using:
#+BEGIN_SRC C
/* initialise the json parser with the contents of information */
int jsonp_init(jsonp_info_t info);
#+END_SRC

You can create a jsonp_info_t structure using:
#+BEGIN_SRC C
/* initialises a jsonp_info_t structure with @type and @data */
jsonp_info_t jsonp_create_json_info(JSONP_INFO_DATA_TYPE type,
                                    const char *data);
#+END_SRC

Depending on what type you use, will determine how the parser treats data:
#+BEGIN_SRC C
typedef enum {
        JSONP_FILE = 0,         /* tells parser to treat data as a file path */
        JSONP_TEXT,             /* tells parser to treat data as a null-terminated character array */
        JSONP_INFO_DATA_COUNT
} JSONP_INFO_DATA_TYPE;
#+END_SRC

To close or free the data used by the parser you will need to make a call to:
#+BEGIN_SRC C
/* free the contents held in the json parser global state,
   this will free the parser's copy of the buffer, and/or close
   the open file it has */
int jsonp_free(void);
#+END_SRC

Once you have done the initialisation, you can now process tokens using the API:
#+BEGIN_SRC C
/* token operations */
JSONP_EXTERN jsonp_token jsonp_peek_token();                       /* peeks the next token  */
JSONP_EXTERN jsonp_token jsonp_get_token();                        /* gets the next token   */
JSONP_EXTERN jsonp_token jsonp_unget_token(jsonp_token tok);       /* ungets the next token */
JSONP_EXTERN int jsonp_rewind(void);                               /* goes to start of file or buffer the */
#+END_SRC
